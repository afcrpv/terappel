class SearchDecorator < ApplicationDecorator
  decorates :search

  def search_params
    result = attributes
    result['centre'] = Centre.find(centre_id).name if centre_id
    result['date appel'] = "du " + h.l(min_date_appel) + " au " + h.l(max_date_appel)
    result['motif'] = Motif.find(motif_id).name if motif_id
    result['expo_nature'] = ExpoNature.find(expo_nature_id).name if expo_nature_id
    result['expo_type'] = ExpoType.find(expo_type_id).name if expo_type_id
    result['expo_terme'] = ExpoTerme.find(expo_terme_id).name if expo_terme_id
    result['indication'] = Indication.find(indication_id).name if indication_id
    result['evolution'] = Evolution.find(evolution_id).name if evolution_id
    result = result.delete_if {|k,v| k =~ /id$/}
    result = result.delete_if {|k,v| %w(max_date_appel min_date_appel).include?(k)}
    result = result.delete_if {|k,v| %w(created_at updated_at).include?(k)}
    result = result.delete_if {|k,v| !v.present?}
    result
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
