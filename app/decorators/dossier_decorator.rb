#encoding: utf-8
class DossierDecorator < ApplicationDecorator
  decorates :dossier

  %w(malformation pathologie).each do |mp|
    define_method mp do
      if dossier.bebes.any?
        ["Oui", "Non", "Ne sait pas"].each do |value|
          if dossier.bebes.any? {|b| b.send(mp) == value}
            return value
          end
        end
      end
    end
  end

  def liste_bebes
    if dossier.bebes.any?
      rows = ""
      dossier.bebes.each_with_index do |bebe, index|
        fields = []
        %w(poids taille pc apgar1 apgar5 malformation pathologie).each do |field|
          fields.push "#{field}=#{bebe.send(field)}"
        end
        label = h.content_tag :span, "Bebe #{index}", class: "libelle"
        columns = h.content_tag :div, label + fields.join(", "), class: "span12"
        rows += h.content_tag :div, columns, class: "row"
      end
      rows.html_safe
    end
  end
  def evolution_full_name
    attribute = dossier.evolution_name
    liste = %w(GEU FCS IVG IMG MIU NAI)
    hash_modaccouch = array_to_hash(Dossier::MODACCOUCH)
    if liste.include?(attribute)
      result = dossier.evolution_libelle
      result += " à #{dossier.terme} SA" if dossier.terme
      if attribute == "NAI"
        result += " par #{ hash_modaccouch[dossier.modaccouch]}" if dossier.modaccouch
      else
        result
      end
    else
      dossier.evolution_libelle
    end
  end
  %w(expo_terato ass_med_proc).each do |method|
    define_method method do
      handle_none dossier.send(method) do
        hash = array_to_hash Dossier::ONI
        hash[dossier.send(method)]
      end
    end
  end
  %w(age_grossesse terme).each do |sa|
    define_method sa do
      handle_none dossier.send(sa) do
        dossier.send(sa).to_s + " SA"
      end
    end
  end
  def atcds_grs
    attribute = dossier.grsant
    handle_none attribute do
      if attribute == 0
        result = "primipare-primigeste"
      else
        result = attribute.to_s
        gestes = {}
        %w(fcs geu miu ivg img nai).each do |geste|
          if geste == "nai"
            gestes["naissance"] = dossier.send(geste)
          else
            gestes[geste] = dossier.send(geste)
          end
        end
        autres = []
        gestes.each do |k, v|
          if v && v > 0
            if k == "naissance"
              autres.push "#{h.pluralize(v, k)}"
            else
              autres.push v.to_s + " #{k.upcase}"
            end
          end
        end
        result += " (#{autres.to_sentence})"
      end
    end
  end

  %w(fam perso).each do |atcds|
    define_method "atcds_#{atcds}" do
      attribute = dossier.send("antecedents_#{atcds}")
      handle_none attribute do
        case attribute
        when "1" then "Aucun"
        when "0" then self.send("comm_antecedents_#{atcds}")
        else
          attribute
        end
      end
    end
  end

  %w(tabac alcool).each do |vice|
    define_method vice do
      const = vice == "tabac" ? Dossier::TABAC : Dossier::ALCOOL
      suffix = vice == "tabac" ? " cigarettes/j" : ""
      hash = array_to_hash(const)
      handle_none dossier.send(vice) do
        hash[dossier.send(vice).to_s] + suffix
      end
    end
  end

  def patiente
    handle_none dossier.patiente_fullname do
      dossier.patiente_fullname
    end
  end

  def button_to_modal
    h.link_to "#dossier_#{dossier.id}_modal", class: "btn btn-small", "data-toggle" => "modal" do
      h.safe_concat "<i class='icon-info-sign'></i>" + "\nDétails"
    end
  end

  %w(appel dernieres_regles debut_grossesse accouchement_prevu reelle_accouchement).each do |date|
    method_name = "date_#{date}"
    define_method method_name do
      handle_none dossier.send(method_name) do
        localize_date dossier.send(method_name)
      end
    end
  end

  def produit_name(index)
    if produits.any?
      produits[index].try(:name)
    end
  end

  def expositions
    handle_none dossier.produits_names, "Aucune", nil do
      twipsy dossier.produits_names
    end
  end

  private

  def method_missing (method, *args, &block)
    call = dossier.send(method, *args, &block)
    handle_none call do
      call
    end
  end
  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by calling this method:
  #     lazy_helpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"), 
  #                   :class => 'timestamp'
  #   end
end
